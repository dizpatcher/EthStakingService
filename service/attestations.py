import math
import functools
from collections import defaultdict

from prometheus_client import Gauge

from .cl_node import ConsensusNode
from .data_types import Block, Validators, ConsensusClient
from .notifier import Telegram
from .utils import (
    LimitedDict,
    aggregate_bits,
    apply_mask,
    hex_to_binary,
    delete_zero_bits,
    switch_endianness,
)

from . import config

SLOTS_PER_EPOCH = config['SLOTS_PER_EPOCH']

print = functools.partial(print, flush=True)

prom_missed_attestations = Gauge("n_missed_attestations", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π")
prom_paired_missed_attestations = Gauge("n_paired_missed_attestations", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π –ø–æ–¥—Ä—è–¥")
prom_participation_rate = Gauge("attestation_rate_gauge", "–£—Ä–æ–≤–µ–Ω—å —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω—Å–µ–Ω—Å—É—Å–µ")

def process_missed_attestations(
    cl_node: ConsensusNode,
    cl_client: ConsensusClient,
    epoch2index2validator_index: LimitedDict,
    epoch: int,
    telegram: Telegram | None,
) -> set[int]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    cl_node                      : Beacon-–Ω–æ–¥–∞
    cl_client                    : –ö–æ–Ω—Å–µ–Ω—Å—É—Å –∫–ª–∏–µ–Ω—Ç (LH, Prysm –∏ —Ç–¥)
    epoch2index2validator_index  : –°–ª–æ–≤–∞—Ä—å:
        —ç–ø–æ—Ö–∞[–∏–Ω–¥–µ–∫—Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞[–¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞]]
    epoch                        : –≠–ø–æ—Ö–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
    """
    if epoch < 1:
        return set()

    index2validator: dict[int, Validators.DataItem.Validator] = (
        epoch2index2validator_index[epoch - 1]
        if epoch - 1 in epoch2index2validator_index
        else epoch2index2validator_index[epoch]
    )

    validators_index = set(index2validator)
    validators_liveness = cl_node.get_validators_liveness(
        cl_client, epoch - 1, validators_index
    )

    dead_indexes = {
        index for index, liveness in validators_liveness.items() if not liveness
    }

    prom_missed_attestations.set(len(dead_indexes))

    if len(dead_indexes) == 0:
        return set()

    first_indexes = list([str(idx) for idx in dead_indexes])[:5]
    
    n_extra_vals = len(dead_indexes) - len(first_indexes)
    message = f"üì¢ –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã {', '.join(first_indexes)}{f' –∏ –µ—â—ë {n_extra_vals} ' if n_extra_vals > 0 else ''} –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –≤ —ç–ø–æ—Ö–µ {epoch - 1}"

    if telegram is not None:
        telegram.send_broadcast_message(message)

    print(message)

    return dead_indexes


def process_paired_missed_attestations(
    dead_indexes: set[int],
    previous_dead_indexes: set[int],
    epoch: int,
    telegram: Telegram | None,
) -> set[int]:
    """–ü—Ä–æ–ø—É—Å–∫ –¥–≤—É—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π –ø–æ–¥—Ä—è–¥

    –ü–æ–¥—Ä—è–¥:
    dead_indexes                 : –ò–Ω–¥–µ–∫—Å—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
    previous_dead_indexes        : –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —ç–ø–æ—Ö–µ

    epoch                        : –≠–ø–æ—Ö–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
    telegram                     : –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
    """
    if epoch < 2:
        return set()

    double_dead_indexes = dead_indexes & previous_dead_indexes
    prom_paired_missed_attestations.set(len(double_dead_indexes))

    if len(double_dead_indexes) == 0:
        return set()

    first_indexes = list([str(idx) for idx in double_dead_indexes])[:5]

    n_extra_vals = len(double_dead_indexes) - len(first_indexes)
    message = f"""
        üîä –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã {', '.join(first_indexes)}{f' –∏ –µ—â—ë {n_extra_vals} ' if n_extra_vals > 0 else ''} –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ 2 –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥ —Å —ç–ø–æ—Ö–∏ {epoch - 2}
        –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–æ–¥–æ–π!
    """

    print(message)

    if telegram is not None:
        telegram.send_broadcast_message(message)

    return double_dead_indexes


def process_attestations(
    cl_node: ConsensusNode,
    block: Block,
    slot: int,
    own_active_validators_index2validator: dict[int, Validators.DataItem.Validator],
    telegram: Telegram | None = None
) -> set[int]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    cl_node                              : Beacon-–Ω–æ–¥–∞
    block                                : –ë–ª–æ–∫, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∏—â—É—Ç—Å—è –Ω–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
    slot                                 : –°–ª–æ—Ç
    own_active_validators_index2validator: –°–ª–æ–≤–∞—Ä—å:
      –∏–Ω–¥–µ–∫—Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞[–ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞]
    telegram: –û–±—ä–µ–∫—Ç –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    if slot < 1:
        return set()

    previous_slot = slot - 1

    # –≠–ø–æ—Ö–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ—Ç–∞ - —ç—Ç–æ –Ω–µ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —ç–ø–æ—Ö–∞, –∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —ç–ø–æ—Ö–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ª–æ—Ç—É.
    epoch_of_previous_slot = math.floor(previous_slot / SLOTS_PER_EPOCH)

    # –í—Å–µ –∏–Ω–¥–µ–∫—Å—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    own_active_validators_index = set(own_active_validators_index2validator)

    # –í–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
    # —Å–ª–æ—Ç[–∏–Ω–¥–µ–∫—Å –∫–æ–º–º–∏—Ç–µ—Ç–∞[—Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –∞—Ç—Ç–µ—Å—Ç–∞–≤–∞—Ç—å —Å–ª–æ—Ç –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–º–º–∏—Ç–µ—Ç–µ]]
    duty_slot2committee_index2validators_index: dict[
        int, dict[int, list[int]]
    ] = cl_node.get_duty_slot2committee_index2validators_index(
        epoch_of_previous_slot
    )

    # –°–ª–æ–≤–∞—Ä—å
    # –∏–Ω–¥–µ–∫—Å –∫–æ–º–º–∏—Ç–µ—Ç–∞ [—Å–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –≤ –∫–æ–º–º–∏—Ç–µ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–ª–æ—Ç–µ]
    duty_committee_index2validators_index_during_previous_slot = (
        duty_slot2committee_index2validators_index[previous_slot]
    )

    # –ò–Ω–¥–µ–∫—Å—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–ª–æ—Ç–µ
    own_validators_index_attested_during_previous_slot = set(
        (
            item
            for sublist in duty_committee_index2validators_index_during_previous_slot.values()
            for item in sublist
        )
    )

    # –ò–Ω–¥–µ–∫—Å—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–ª–æ—Ç–µ
    own_validators_index_attested_during_previous_slot = (
        own_validators_index_attested_during_previous_slot
        & own_active_validators_index
    )

    # –°–ª–æ–≤–∞—Ä—å
    # –ò–Ω–¥–µ–∫—Å –∫–æ–º–∏–∏—Ç–µ—Ç–∞ [—Å–ø–∏—Å–æ–∫ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –æ–∑–Ω–∞—á–∞—é—â–∏—Ö —É—Å–ø–µ—à–Ω—É—é –∏–ª–∏ –Ω–µ—Ç –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é]
    committee_index2validator_attestation_success = aggregate_attestations(
        block, previous_slot
    )

    list_of_validators_index_that_attested_optimally_during_previous_slot = (
        apply_mask(
            duty_committee_index2validators_index_during_previous_slot[
                actual_committee_index
            ],
            validator_attestation_success,
        )
        for (
            actual_committee_index,
            validator_attestation_success,
        ) in committee_index2validator_attestation_success.items()
    )

    # –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–ª–æ—Ç–µ
    validators_index_that_attested_optimally_during_previous_slot: set[int] = set(
        item
        for sublist in list_of_validators_index_that_attested_optimally_during_previous_slot
        for item in sublist
    )

    # –ò–Ω–¥–µ–∫—Å—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–≤–µ–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–ª–æ—Ç–µ
    own_validators_index_that_attested_optimally_during_previous_slot = (
        validators_index_that_attested_optimally_during_previous_slot
        & own_validators_index_attested_during_previous_slot
    )

    # –ò–Ω–¥–µ–∫—Å—ã –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–≤–µ–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–ª–æ—Ç–µ
    own_validators_wo_optimal_attesting_prev_slot = (
        own_validators_index_attested_during_previous_slot
        - own_validators_index_that_attested_optimally_during_previous_slot
    )

    attestation_rate = (
        len(own_validators_index_that_attested_optimally_during_previous_slot)
        / len(own_validators_index_attested_during_previous_slot)
        if len(own_validators_index_attested_during_previous_slot) != 0
        else None
    )

    if attestation_rate is not None:
        prom_participation_rate.set(100 * attestation_rate)

    if len(own_validators_wo_optimal_attesting_prev_slot) > 0:
        assert attestation_rate is not None

        first_indexes = sorted(list([str(idx) for idx in own_validators_wo_optimal_attesting_prev_slot]))[:5]

        n_extra_vals = len(own_validators_wo_optimal_attesting_prev_slot) - len(first_indexes)
        message = f"""
            ‚ùó –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º {', '.join(first_indexes)}{f' –∏ –µ—â—ë {n_extra_vals} ' if n_extra_vals > 0 else ''} –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–ª—è —Å–ª–æ—Ç–∞ {previous_slot}
            (participation rate = {round(100 * attestation_rate, 1)}%)
            """
        
        if telegram is not None:
            telegram.send_broadcast_message(message)
        print(message)

    return own_validators_wo_optimal_attesting_prev_slot


def aggregate_attestations(block: Block, slot: int) -> dict[int, list[bool]]:
    """–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    block: –ë–ª–æ–∫
    slot: –°–ª–æ—Ç

    –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:
    –ö–∞–∂–¥–æ–µ –±—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –≤ –∫–æ–º–º–∏—Ç–µ—Ç–µ
    –ï—Å–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–ª–æ—Ç–∞ –≤–∫–ª—é—á–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–∏–π, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏ = True
    """
    filtered_attestations = (attestation for attestation in block.data.message.body.attestations 
                             if attestation.data.slot == slot)

    # TODO: dict comprehension
    committee_index2aggregation_bits: dict[
        int, list[list[bool]]
    ] = defaultdict(list)

    for attestation in filtered_attestations:
        aggregated_bits_little_endian_with_last_bit = attestation.aggregation_bits

        # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –±–∏—Ç–æ–≤ –∏–∑ 16-–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –±–∞–π—Ç–æ–≤ –≤ –±—É–ª–µ–∞–Ω
        aggregated_bits_little_endian_with_last_bit = hex_to_binary(aggregated_bits_little_endian_with_last_bit)

        # –ë–∏—Ç—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –≤ little endian.
        # –û–¥–Ω–∞–∫–æ, –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –≤ –∫–æ–º–º–∏—Ç–µ—Ç–µ —Ä–∞—Å—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ big endian —Ñ–æ—Ä–º–∞—Ç–µ.
        # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å—ë –∫ big endian
        aggregated_bits_with_last_bit = switch_endianness(aggregated_bits_little_endian_with_last_bit)

        # –û–¥–∏–Ω –±–∏—Ç –Ω–∞ –æ–¥–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ (–≤ aggregations bits)
        # –ë–∏—Ç —á–∏—Å–ª–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –≤—Å–µ–≥–¥–∞ –∫—Ä–∞—Ç–µ–Ω 8, –¥–∞–∂–µ –µ—Å–ª–∏ —á–∏—Å–ª–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –Ω–µ –∫—Ä–∞—Ç–Ω–æ 8. 
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π "1" (–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ True) –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—É. 
        # –í—Å–µ —Å–ª–µ–¥—É—é—â–∏–µ "0" –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω–∏ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã
        # –ø–æ—ç—Ç–æ–º—É –ø–æ—Å–ª–µ–¥–Ω—è—è "1" –∏ –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ "0" —É–¥–∞–ª—è—é—Çc—è
        aggregated_bits = delete_zero_bits(aggregated_bits_with_last_bit)

        committee_index2aggregation_bits[attestation.data.index].append(aggregated_bits)

    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π
    items = committee_index2aggregation_bits.items()

    return {
        committee_index: aggregate_bits(aggregation_bits)
        for committee_index, aggregation_bits in items
    }
