"""–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –≤—ã–ø—É—Å–∫–∞ –±–ª–æ–∫–∞"""

import math
import functools
import requests

from prometheus_client import Counter, Gauge

from .cl_node import ConsensusNode, NoBlockError
from .data_types import Block, BlockTerm
from .notifier import Telegram
from . import config

print = functools.partial(print, flush=True)

SLOTS_PER_EPOCH = config['SLOTS_PER_EPOCH']
MEV_RELAYS = config['MEV_RELAYS']
RELAY_PAYLOAD_URL = config['RELAY_PAYLOAD_URL']

prom_missed_head_proposal = Counter(
    "n_missed_head_proposals",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤",
)

prom_missed_finalized_proposal = Counter(
    "n_missed_finalized_proposals",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤",
)

prom_future_proposal = Gauge(
    "future_proposals",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞–µ–º—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –≤—ã–ø—É—Å–∫–∞",
)

prom_blocks_processed = Counter(
    'n_blocks',
    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤',
)

prom_mevblocks_processed = Counter(
    'n_mevblocks',
    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ MEV-–±–ª–æ–∫–æ–≤',
)

prom_mevblocks_rewards_count = Counter(
    'mevblock_rewards',
    '–°—É–º–º–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤',
)

def process_block_proposal(slot: int, block: Block = None) -> None:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–æ–≤ –æ–± —É—Ä–æ–≤–Ω–µ Maximal Extracted Value –≤ —Å–µ—Ç–∏"""

    if not slot: 
        slot = block.data.message.slot
    prom_blocks_processed.inc()
    
    for relay in MEV_RELAYS.values():
        url = f'{relay}{RELAY_PAYLOAD_URL}?slot={slot}'
        try:
            r = requests.get(url)
            r.raise_for_status()
        except requests.exceptions.HTTPError as err:
            print(f"HTTP –æ—à–∏–±–∫–∞: {err}")
            continue
        except requests.exceptions.SSLError as err:
            print(f"SSLError –æ—à–∏–±–∫–∞: {err}")
            continue
        
        mevblock_data = r.json()
        if mevblock_data:
            prom_mevblocks_processed.inc()
            mev_reward = int(mevblock_data[0].get('value', 0)) / 10**18
            return mev_reward
        return 0


def process_missed_blocks_head(
    cl_node: ConsensusNode,
    block: Block | None,
    slot: int,
    own_pubkeys: set[str],
    telegram: Telegram | None
) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –±–µ–∑ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    cl_node        : Beacon-–Ω–æ–¥–∞
    potential_block: –ë–ª–æ–∫
    slot           : –°–ª–æ—Ç
    own_pubkeys    : –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    telegram       : –≠–∫–∑–µ–º–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞

    True –µ—Å–ª–∏ –±–ª–æ–∫ –±—ã–ª –≤—ã–ø—É—â–µ–Ω
    """
    missed = block is None
    epoch = math.floor(slot / SLOTS_PER_EPOCH)
    proposer_duties = cl_node.get_proposer_duties(epoch)

    # –ü–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–∫
    proposer_duties_data = proposer_duties.data

    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫
    proposer_pubkey = next(
        (
            proposer_duty_data.pubkey
            for proposer_duty_data in proposer_duties_data
            if proposer_duty_data.slot == slot
        )
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    is_own_validator = proposer_pubkey in own_pubkeys
    positive_sign = '‚ú®' if is_own_validator else '‚òëÔ∏è'
    negative_sign = 'üî∫' if is_own_validator else '‚ö†Ô∏è'

    emoji, proposed_or_missed = (
        (negative_sign, "–ø—Ä–æ–ø—É—Å—Ç–∏–ª  ") if missed else (positive_sign, "–≤—ã–ø—É—Å—Ç–∏–ª")
    )

    message = f"""
        {emoji} –í–∞–ª–∏–¥–∞—Ç–æ—Ä {'–ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º ' if is_own_validator else ''}{proposer_pubkey}
        {proposed_or_missed} –±–ª–æ–∫ –≤ —ç–ø–æ—Ö–µ {epoch} - —Å–ª–æ—Ç {slot} {emoji} 
        üîë {len(own_pubkeys)} –∫–ª—é—á–µ–π –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    """

    print(message)
    if telegram is not None and missed and is_own_validator:
        telegram.send_broadcast_message(message)

    if is_own_validator and missed:
        prom_missed_head_proposal.inc()

    return is_own_validator


def process_missed_blocks_finalized(
    cl_node: ConsensusNode,
    last_processed_finalized_slot: int,
    slot: int,
    block_reward: int,
    own_pubkeys: set[str],
    telegram: Telegram | None,
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –±–µ–∑ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    cl_node        : Beacon-–Ω–æ–¥–∞
    potential_block: –ù–æ–º–µ—Ä –±–ª–æ–∫–∞
    slot           : –°–ª–æ—Ç
    own_pubkeys    : –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    telegram       : –≠–∫–∑–µ–º–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Ç–≥-–±–æ—Ç–∞

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫
    """
    assert last_processed_finalized_slot <= slot, "–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ª–æ—Ç > —Å–ª–æ—Ç"

    last_finalized_header = cl_node.get_header(BlockTerm.FINALIZED)
    last_finalized_slot = last_finalized_header.data.header.message.slot
    epoch_of_last_finalized_slot = math.floor(last_finalized_slot / SLOTS_PER_EPOCH)

    # –í–æ–∑–º–æ–∂–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—á–µ–Ω—å —Å—Ç–∞—Ä–æ–π —ç–ø–æ—Ö–∏
    cl_node.get_proposer_duties(epoch_of_last_finalized_slot)

    for slot_ in range(last_processed_finalized_slot + 1, last_finalized_slot + 1):
        epoch = math.floor(slot_ / SLOTS_PER_EPOCH)
        proposer_duties = cl_node.get_proposer_duties(epoch)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –¥–ª—è –≤—ã–ø—É—Å–∫–∞ –±–ª–æ–∫–∞
        proposer_duties_data = proposer_duties.data

        # –¥–∞–Ω–Ω—ã–µ - —Å–ø–∏—Å–æ–∫
        proposer_pubkey = next(
            (
                proposer_duty_data.pubkey
                for proposer_duty_data in proposer_duties_data
                if proposer_duty_data.slot == slot_
            )
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        is_own_validator = proposer_pubkey in own_pubkeys

        if not is_own_validator:
            continue

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–ª–æ–∫ –±—ã–ª –≤—ã–ø—É—â–µ–Ω
        try:
            cl_node.get_header(slot_)
            message = f"""
                    üìà –í–∞–ª–∏–¥–∞—Ç–æ—Ä `{proposer_pubkey}` —Å–æ–∑–¥–∞–ª –±–ª–æ–∫! (—Å–ª–æ—Ç {slot_}) 
                    –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –Ω–µ–≥–æ: {block_reward} ETH üìà
                    """
            prom_mevblocks_rewards_count.inc(block_reward)

        except NoBlockError:

            message = f"‚ùå –í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º `{proposer_pubkey}` –ø—Ä–æ–ø—É—Å—Ç–∏–ª –±–ª–æ–∫ –≤ —ç–ø–æ—Ö–µ {epoch} - —Å–ª–æ—Ç {slot_} ‚ùå"
            prom_missed_finalized_proposal.inc()

        print(message)

        if telegram is not None:
            telegram.send_broadcast_message(message)

    return last_finalized_slot


def process_future_blocks_proposal(
    cl_node: ConsensusNode,
    own_pubkeys: set[str],
    slot: int,
    is_new_epoch: bool,
    telegram: Telegram | None = None
) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–ø—É—Å–∫–æ–≤ –±–ª–æ–∫–æ–≤

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    beacon      : Beacon-–Ω–æ–¥–∞
    own_pubkeys : –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
    slot        : –°–ª–æ—Ç
    is_new_epoch: –ù–æ–≤–∞—è –ª–∏ —ç–ø–æ—Ö–∞
    """
    epoch = math.floor(slot / SLOTS_PER_EPOCH)
    proposers_duties_current_epoch = cl_node.get_proposer_duties(epoch)
    proposers_duties_next_epoch = cl_node.get_proposer_duties(epoch + 1)

    concatenated_data = (
        proposers_duties_current_epoch.data + proposers_duties_next_epoch.data
    )

    filtered = [
        item
        for item in concatenated_data
        if item.pubkey in own_pubkeys and item.slot >= slot
    ]

    prom_future_proposal.set(len(filtered))

    if is_new_epoch:
        for item in filtered:
            message = f"""
                üö¶ –í–∞–ª–∏–¥–∞—Ç–æ—Ä –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º `{item.pubkey}` –¥–æ–ª–∂–µ–Ω –≤—ã–ø—É—Å—Ç–∏—Ç—å –±–ª–æ–∫ –≤ —Å–ª–æ—Ç–µ {item.slot} üö¶
                (—á–µ—Ä–µ–∑ {f'{round((item.slot - slot)*12/60, 2)} –º–∏–Ω—É—Ç—ã' if (item.slot - slot)*12/60 > 1 else f'{(item.slot - slot)*12} —Å–µ–∫—É–Ω–¥'})"
            """

            if telegram:
                telegram.send_broadcast_message(message)

            print(message)

    return len(filtered)
