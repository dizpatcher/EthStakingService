"""–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è CLI."""

import math
import functools
from . import config
from os import environ
from pathlib import Path
from time import sleep, time
from typing import List, Optional

import typer
from prometheus_client import Gauge, start_http_server
from typer import Option

from .cl_node import ConsensusNode
from .el_node import ExecutionNode
from .coingecko import Coingecko
from .notifier import Telegram
from .activation_queue import export_activation_duration
from .attestations import (
    process_paired_missed_attestations,
    process_missed_attestations,
)
from .blocks import (
    process_block_proposal,
    process_missed_blocks_finalized, 
    process_missed_blocks_head, 
    process_future_blocks_proposal
)
from .data_types import ConsensusClient, Validators
from .rewards import process_rewards
from .validators import ValidatorsSlashed, ValidatorsExited
from .attestations import process_attestations
from .utils import (
    LimitedDict,
    lower_eth1_address,
    get_own_pubkeys,
    get_next_slot
)
from . import config
from .notifier import Telegram
from misc import EL_NODE_URL

print = functools.partial(print, flush=True)
app = typer.Typer(add_completion=False)

SECONDS_PER_SLOT =  config['SECONDS_PER_SLOT']
SLOTS_PER_EPOCH = config['SLOTS_PER_EPOCH']

MISSED_BLOCK_TIMEOUT_SEC = config['MISSED_BLOCK_TIMEOUT_SEC']
SLOT_FOR_MISSED_ATTESTATIONS_PROCESS = config['SLOT_FOR_MISSED_ATTESTATIONS_PROCESS']
SLOT_FOR_REWARDS_PROCESS = config['SLOT_FOR_REWARDS_PROCESS']

Status = Validators.DataItem.StatusType

prom_slot_gauge = Gauge("slot", "–°–ª–æ—Ç")
prom_epoch_gauge = Gauge("epoch", "–≠–ø–æ—Ö–∞")

prom_queued_validators_gauge = Gauge(
    "own_validators_pending",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –≤ –æ—á–µ—Ä–µ–¥–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º",
)

prom_network_queued_validators_gauge = Gauge(
    "network_validators_pending",
    "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏",
)

prom_active_validators_gauge = Gauge(
    "own_validators_active",
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º",
)

prom_network_active_validators_gauge = Gauge(
    "network_validators_active",
    "–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –≤ —Å–µ—Ç–∏",
)


@app.command()
def run(
    cl_node: str = Option(..., help="URL –∫–æ–Ω–µ–Ω—Å—É—Å —É–∑–ª–∞ —Å–µ—Ç–∏", show_default=False),
    el_node: str = Option(None, help="URL —É–∑–ª–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ—Ç–∏", show_default=False),
    pubkeys_file: Optional[Path] = Option(
        None,
        help="–§–∞–π–ª, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞",
        exists=True,
        file_okay=True,
        dir_okay=False,
        show_default=False,
    ),
    cl_client: ConsensusClient = Option(
        ConsensusClient.OTHER,
        help=(
                "–£–∫–∞–∑–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –Ω–∞ –Ω–æ–¥–µ Consensus-–∫–ª–∏–µ–Ω—Ç (Lighthouse, Prysm, Teku, Nimbus, other)"
        ),
        show_default=True,
    )
) -> None:
    """
    üö® –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –≤ Ethereum üö®

    \b
    –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ –≤ Ethereum –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∫–æ–Ω—Å–µ–Ω—Å—É—Å —Å–ª–æ–π Ethereum –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–∞—Å, –µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã:
    - –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–ª–æ–∫–∞ –≤ —Å–ª–µ–¥—É—é—â–∏–µ 2 —ç–ø–æ—Ö–∏
    - –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–∫
    - –Ω–µ —Å–º–æ–≥–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é
    - –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é
    - –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–≤–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥
    - –ø–æ–∫–∏–Ω—É–ª–∏ —Å–µ—Ç—å
    - –ø–æ–ª—É—á–∏–ª–∏ —à—Ç—Ä–∞—Ñ (—Å–ª—ç—à–∏–Ω–≥)
    - —Å–æ–∑–¥–∞–ª–∏ –±–ª–æ–∫ –æ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–µ–ª–µ—è
    - –ø–æ–ª—É—á–∏–ª–∏ –Ω–µ –ø–æ–ª–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏

    \b
    –¢–∞–∫–∂–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω –∏–º–ø–æ—Ä—Ç —Ç–∞–∫–∏—Ö –±–∞–∑–æ–≤—ã—Ö –≤–µ—â–µ–π –∫–∞–∫:
    - –æ–±—ä—ë–º –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    - —Ä—ã–Ω–æ—á–Ω–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ–≥–æ —Ä—ã–Ω–∫–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ Ethereum
    - —Ç–µ–∫—É—â—É—é —ç–ø–æ—Ö—É –∏ —Å–ª–æ—Ç –≤ —Å–µ—Ç–∏
    - –æ–±—â–µ–µ —á–∏—Å–ª–æ "–∑–∞—Å–ª–µ—à–µ–Ω–Ω—ã—Ö" –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
    - –æ–±–º–µ–Ω–Ω—ã–µ –∫—É—Ä—Å ETH/USD, ETH/RUB
    - –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é
    - –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    - –≤—ã—à–µ–¥—à–∏–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –ø–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
    - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é –≤ —Å–µ—Ç–∏
    - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –≤ —Å–µ—Ç–∏
    - –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é

    \b
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
    - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –ø—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å

    \b
    –ö–ª—é—á–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥—Ä—É–∂–∞–±—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π —ç–ø–æ—Ö–∏.
    - –ï—Å–ª–∏ –∫–ª—é—á–∏ —É–∫–∞–∑–∞–Ω—ã –≤ —Ñ–∞–π–ª—ã, –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–∏—Å–∞.

    \b
    –°–µ—Ä–≤–∏—Å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –≤—ã—â–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥–∏, Prometheus –∏ Telegram

    Prometheus –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞ 8000 –ø–æ—Ä—Ç—É.
    """
    try: 
        handle(
            cl_node,
            el_node,
            pubkeys_file,
            cl_client
        )
    except KeyboardInterrupt: 
        print("‚õî     –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


def handle(
    cl_node_url: str,
    el_node_url: str | None,
    pubkeys_file: Path | None,
    cl_client: ConsensusClient | None,
) -> None:
    """–ü—Ä–æ—Å—Ç–æ –æ–±–æ–ª–æ—á–∫–∞, –ø–æ–∑–≤–æ–ª—è—é—â–∞—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    print('–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...')

    cl_node = ConsensusNode(cl_node_url)
    el_node = ExecutionNode(el_node_url) if el_node_url is not None else None
    coingecko = Coingecko()
    telegram = Telegram()

    own_pubkeys: set[str] = set()
    own_active_idx2val: dict[int, Validators.DataItem.Validator] = {}
    own_validators_missed_attestation: set[int] = set()
    own_validators_missed_previous_attestation: set[int] = set()
    own_epoch2active_idx2val = LimitedDict(3)
    net_epoch2active_idx2val = LimitedDict(3)

    exited_validators = ValidatorsExited(telegram)
    slashed_validators = ValidatorsSlashed(telegram)

    last_missed_attestations_process_epoch: int | None = None
    last_rewards_process_epoch: int | None = None

    previous_epoch: int | None = None
    last_processed_finalized_slot: int | None = None

    genesis = cl_node.get_genesis()

    for monitoring_slot_number, (slot, slot_start_time_sec) in enumerate(get_next_slot(genesis.data.genesis_time)):
        if slot < 0:
            seconds2start = - slot * SECONDS_PER_SLOT
            print(f"‚è±Ô∏è  –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {slot} —Å–ª–æ—Ç–æ–≤ ({seconds2start} —Å–µ–∫—É–Ω–¥)")
            continue

        epoch = math.floor(slot / SLOTS_PER_EPOCH)
        slot_in_epoch = slot % SLOTS_PER_EPOCH

        prom_slot_gauge.set(slot)
        prom_epoch_gauge.set(epoch)

        is_new_epoch = previous_epoch is None or previous_epoch != epoch

        if last_processed_finalized_slot is None:
            last_processed_finalized_slot = slot

        if is_new_epoch:
            try:
                own_pubkeys = get_own_pubkeys(pubkeys_file)
            except ValueError:
                raise typer.BadParameter("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –Ω–µ –≤–∞–ª–∏–¥–Ω—ã")

            # –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã —Å–µ—Ç–∏
            # ------------------
            net_status2idx2val = cl_node.get_status2index2validator()

            net_pending_q_idx2val = net_status2idx2val.get(Status.pending_queued, {})
            n_pending_validators = len(net_pending_q_idx2val)
            prom_network_queued_validators_gauge.set(n_pending_validators)

            active_ongoing = net_status2idx2val.get(Status.active_ongoing, {})
            active_exiting = net_status2idx2val.get(Status.active_exiting, {})
            active_slashed = net_status2idx2val.get(Status.active_slashed, {})
            net_active_idx2val = active_ongoing | active_exiting | active_slashed
            net_epoch2active_idx2val[epoch] = net_active_idx2val

            n_active_validators = len(net_active_idx2val)
            prom_network_active_validators_gauge.set(n_active_validators)

            net_exited_s_idx2val = net_status2idx2val.get(Status.exited_slashed, {})

            withdrawal_possible = net_status2idx2val.get(Status.withdrawal_possible, {})
            withdrawal_done = net_status2idx2val.get(Status.withdrawal_done, {})
            net_withdrawable_idx2val = withdrawal_possible | withdrawal_done

            # –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–ª—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            # --------------
            own_status2idx2val = {
                status: {
                    index: validator
                    for index, validator in validator.items()
                    if validator.pubkey in own_pubkeys
                }
                for status, validator in net_status2idx2val.items()
            }

            own_queued_idx2val = own_status2idx2val.get(Status.pending_queued, {})
            prom_queued_validators_gauge.set(len(own_queued_idx2val))

            ongoing = own_status2idx2val.get(Status.active_ongoing, {})
            active_exiting = own_status2idx2val.get(Status.active_exiting, {})
            active_slashed = own_status2idx2val.get(Status.active_slashed, {})
            own_active_idx2val = ongoing | active_exiting | active_slashed
            own_epoch2active_idx2val[epoch] = own_active_idx2val

            prom_active_validators_gauge.set(len(own_active_idx2val))
            own_exited_u_idx2val = own_status2idx2val.get(Status.exited_unslashed, {})
            own_exited_s_idx2val = own_status2idx2val.get(Status.exited_slashed, {})

            withdrawal_possible = own_status2idx2val.get(Status.withdrawal_possible, {})
            withdrawal_done = own_status2idx2val.get(Status.withdrawal_done, {})
            own_withdrawable_idx2val = withdrawal_possible | withdrawal_done

            exited_validators.process(own_exited_u_idx2val, own_withdrawable_idx2val)

            slashed_validators.process(
                net_exited_s_idx2val,
                own_exited_s_idx2val,
                net_withdrawable_idx2val,
                own_withdrawable_idx2val,
            )

            export_activation_duration(n_active_validators, n_pending_validators)
            coingecko.get_eth_exchange_rate('usd')
            coingecko.get_eth_exchange_rate('rub')

        if previous_epoch is not None and previous_epoch != epoch:
            message = f"üèÅ     –≠–ø–æ—Ö–∞     {epoch}     –Ω–∞—á–∞–ª–∞—Å—å."
            print(message)
            # telegram.send_broadcast_message(message)

        is_process_missed_attestations = (
            slot_in_epoch >= SLOT_FOR_MISSED_ATTESTATIONS_PROCESS
            and (
                last_missed_attestations_process_epoch is None
                or last_missed_attestations_process_epoch != epoch
            )
        )

        if is_process_missed_attestations:
            own_validators_missed_attestation = (
                process_missed_attestations(
                    cl_node, cl_client, own_epoch2active_idx2val, epoch, telegram
                )
            )

            process_paired_missed_attestations(
                own_validators_missed_attestation,
                own_validators_missed_previous_attestation,
                epoch,
                telegram,
            )

            last_missed_attestations_process_epoch = epoch

        is_slot_big_enough = slot_in_epoch >= SLOT_FOR_REWARDS_PROCESS
        is_last_rewards_epoch_none = last_rewards_process_epoch is None
        is_new_rewards_epoch = last_rewards_process_epoch != epoch
        epoch_condition = is_last_rewards_epoch_none or is_new_rewards_epoch
        should_process_rewards = is_slot_big_enough and epoch_condition

        if should_process_rewards:
            process_rewards(
                cl_node,
                cl_client,
                epoch,
                net_epoch2active_idx2val,
                own_epoch2active_idx2val,
                telegram
            )

            last_rewards_process_epoch = epoch

        process_future_blocks_proposal(cl_node, own_pubkeys, slot, is_new_epoch, telegram)

        block_reward = process_block_proposal(last_processed_finalized_slot)
        last_processed_finalized_slot = process_missed_blocks_finalized(
            cl_node, last_processed_finalized_slot, slot, block_reward, own_pubkeys, telegram
        )

        delta_sec = MISSED_BLOCK_TIMEOUT_SEC - (time() - slot_start_time_sec)
        sleep(max(0, delta_sec))

        potential_block = cl_node.get_potential_block(slot)

        if potential_block is not None:
            block = potential_block
            
            # block_hash = block.data.message.body.execution_payload.block_hash
            # el_node.eth_get_block_by_hash(block_hash)
            process_attestations(
                cl_node,
                block,
                slot,
                own_active_idx2val,
                telegram
            )

        is_own_validator = process_missed_blocks_head(
            cl_node,
            potential_block,
            slot,
            own_pubkeys,
            telegram
        )

        # if is_own_validator and potential_block is not None:
        #     pass

        own_validators_missed_previous_attestation = own_validators_missed_attestation
        previous_epoch = epoch

        if slot_in_epoch >= SLOT_FOR_MISSED_ATTESTATIONS_PROCESS:
            is_process_missed_attestations = True

        if monitoring_slot_number == 0:
            start_http_server(8000)
